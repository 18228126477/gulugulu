spring容器的refresh()创建刷新
1.prepareRefresh()刷新前的预处理
    1）initPropertySources()初始化一些属性设置，子类自定义个性化的初始化方法
    2）getEnvironment().validateRequiredProperties()检验属性的合法性
    3）this.earlyApplicationEvents = new LinkedHashSet<>()保存容器中的一些早期事件
2.obtainFreshBeanFactory()获取BeanFactory
    1）refreshBeanFactory()创建BeanFactory
        创建DefaultListableBeanFactory beanFactory = createBeanFactory()创建一个默认工厂
        设置工厂的id标识
    2）getBeanFactory()【DefaultListableBeanFactory】返回上一步创建好的BeanFactory
3.prepareBeanFactory(beanFactory)BeanFactory的预准备工作（BeanFactory进行一些设置）
    1）设置类加载器，支持的表达式解析器
    2）添加部分的bean的后置处理器【ApplicationContextAwareProcessor】
    3）设置忽略的自动装配接口
    4）注册可以解析的自动装配，注册后能直接在任何组件中注入BeanFactory，ResourceLoader，ApplicationEventPublisher，ApplicationContext
    5）添加部分的bean的后置处理器【ApplicationListenerDetector】
    6）添加编译时的Aspectj支持
    7）给BeanFactory中注册一些能用的组件
        environment【ConfigurableEnvironment】配置环境
        systemProperties【Map<String,Object>】系统属性
        systemEnvironment【Map<String,Object>】系统环境
4.postProcessBeanFactory(beanFactory)准备工作完成后进行的后置处理工作
    1）子类通过重写postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)在BeanFactory创建并与准备完成以后做进一步设置
==================================================以上是BeanFactory创建及预准备工作=======================================================
5.invokeBeanFactoryPostProcessors执行BeanFactory的后置处理器（为容器中的Bean注册工厂处理器）
    BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后执行，也就是上面那四步完成后
    两个接口BeanFactoryPostProcessor，BeanDefinitionRegistryPostProcessor
    执行invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());
    1）先执行BeanDefinitionRegistryPostProcessor的方法
        1.获取所有的BeanDefinitionRegistryPostProcessor
        2.先执行实现了PriorityOrdered优先级排序的BeanDefinitionRegistryPostProcessor
        3.再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
        4.最后执行没有实现任何优先级排序接口的BeanDefinitionRegistryPostProcessor
    2）再执行BeanFactoryPostProcessor的方法
        1.获取所有的BeanFactoryPostProcessor
        2.先执行实现了PriorityOrdered优先级排序的BeanFactoryPostProcessor
        3.再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
        4.最后执行没有实现任何优先级排序接口的BeanFactoryPostProcessor
6.registerBeanPostProcessors(beanFactory)注册Bean的后置处理器（用于拦截Bean的创建过程）
    不同接口类型的BeanPostProcessor，在Bean创建前后的执行时机不一样
    BeanPostProcessor
    DestructionAwareBeanPostProcessor
    InstantiationAwareBeanPostProcessor
    SmartInstantiationAwareBeanPostProcessor
    MergedBeanDefinitionPostProcessor
    1）获取所有的BeanPostProcessor
    2）先注册实现了PriorityOrdered优先级排序的BeanPostProcessor
    3）再注册实现了Ordered优先级排序的BeanPostProcessor
    4）再注册没有优先级排序的BeanPostProcessor
    5）再注册MergedBeanDefinitionPostProcessor的BeanPostProcessor
    6）最后注册ApplicationListenerDetector，来在Bean创建完成后检查是否是ApplicationListener，
        如果是就放在容器的末端
7.initMessageSource()初始化消息来源组件（做国际化功能，消息绑定，消息解析）
    messageSource作用：取出国际化配置文件中的某个Key的值，能按照区域信息获取
    1）获取BeanFactory
    2）看容器中是否有id为messageSource的组件，类型是MessageSource的组件
        如果有把名字赋值给MessageSource的组件
        如果没有创建一个默认的DelegatingMessageSource，并把创建好的MessageSource注册到容器中
    3）上两步后，以后获取国际化配置文件的值的时候，可以自动注入MessageSource
8.initApplicationEventMulticaster()初始化事件派发器
    1）获取BeanFactory
    2）看容器中是否有id为applicationEventMulticaster的组件，
        如果有则把applicationEventMulticaster赋值给ApplicationEventMulticaster
        如果没有则创建一个默认的SimpleApplicationEventMulticaster，并注册到容器中
9.onRefresh()在子容器内初始化其他特殊的bean，子类可重写此方法，在容器刷新时自定义逻辑
10.registerListeners()给容器中注册所有项目中的监听器
    1）获取所有的监听器，并注册到事件派发器中
    2）获取容器中的ApplicationListener，并注册到事件派发器中
    3）派发之前步骤产生的事件
11.finishBeanFactoryInitialization(beanFactory)初始化所有剩下的单实例bean
    1）beanFactory.preInstantiateSingletons()初始化剩下得单实例Bean
        1.获取容器中的所有bean，依次进行初始化和创建对象
        2.获取bean的定义信息
        3.如果bean不是抽象的，是单实例的，不是懒加载的
            1）判断是否是FactoryBean，如果是则创建工厂bean
            2）如果不是FactoryBean，就用getBean(beanName)创建
                1.调用doGetBean(name, null, null, false)
                2.getSingleton(beanName)获取缓存中保存的单实例bean，如果能获取到说明该bean已经被创建过
            3）缓存中获取不到，就开始bean的创建过程
            4）markBeanAsCreated(beanName)标记Bean，防止多线程创建bean时为单实例bean创建多个对象，所以创建前提前标记该bean已经被创建
            5）getMergedLocalBeanDefinition(beanName)获取bean定义信息
            6）mbd.getDependsOn()获取当前bean依赖的其他bean，如果有调用getBean(beanName)
            7）启动单实例bean创建流程
                1.调用createBean(beanName, mbd, args)
                2.resolveBeforeInstantiation(beanName, mbdToUse)让BeanPostProcessors在创建bean之前进行拦截操作
                    InstantiationAwareBeanPostProcessor提前执行
                    先触发该接口的postProcessBeforeInstantiation(Class<?> beanClass, String beanName)，如果不为空
                    再触发该接口的postProcessAfterInstantiation(Object bean, String beanName)
                3.如果resolveBeforeInstantiation(beanName, mbdToUse)没有返回代理对象
                4.调用doCreateBean(beanName, mbdToUse, args)创建bean
                    1）createBeanInstance(beanName, mbd, args)创建bean实例
                        利用工厂方法或者对象的构造器创建bean实例
                    2）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)
                        调用MergedBeanDefinitionPostProcessor
                        触发该接口的postProcessMergedBeanDefinition(mbd, beanType, beanName)
                    3）populateBean(beanName, mbd, instanceWrapper)为bean实例赋值
                        赋值前：
                        1.拿到InstantiationAwareBeanPostProcessor后置处理器执行postProcessAfterInstantiation()
                        2.再拿到InstantiationAwareBeanPostProcessor后置处理器执行postProcessProperties()
                        3.最后执行applyPropertyValues(beanName, mbd, bw, pvs)应用bean属性值，利用反射调用set方法赋值
                    4）initializeBean(beanName, exposedObject, mbd)初始化bean
                        1.invokeAwareMethods(beanName, bean)执行XXXAware接口方法
                            如果实现了BeanNameAware、BeanClassLoaderAware、BeanFactoryAware则执行其回调方法
                        2.在初始化之前执行applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName)
                            执行所有后置处理器的postProcessBeforeInitialization(result, beanName)
                        3.invokeInitMethods(beanName, wrappedBean, mbd)执行初始化方法
                            1.是否是InitializingBean接口的Bean如果是则执行afterPropertiesSet()方法
                            2.是否自定义了初始化方法如果自定义了，则执行invokeCustomInitMethod(beanName, bean, mbd)
                            3.执行后置处理器的applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)
                                调用所有后置处理器的postProcessAfterInitialization(result, beanName)
                        4.注册bean的销毁方法registerDisposableBeanIfNecessary
                5.将创建的bean添加到缓存中
            8）在使用getBean创建在完所有bean之后
                检查所有bean是否实现了SmartInitializingSingleton接口，如果实现了则执行afterSingletonsInstantiated()方法
12.finishRefresh()完成BeanFactory的初始化创建工作，IOC就创建完成
    1）clearResourceCaches()清除容器资源缓存
    2）initLifecycleProcessor()初始化与生命周期有关的后置处理器
        从容器中找是否有默认的LifecycleProcessor组件，如果没有就new DefaultLifecycleProcessor()然后加入到容器中
    3）getLifecycleProcessor().onRefresh()获取到生命周期处理器（beanFactory的生命周期处理器），并执行刷新方法
    4）publishEvent(new ContextRefreshedEvent(this))发布容器刷新时间
    5）LiveBeansView.registerApplicationContext(this)
==========spring容器启动总结============
1.spring容器在启动时，会先保存所有注册进来的Bean定义信息
    1）用XML注册Bean
    2）用注解的方式注册bean
2.spring容器会在合适的时机创建bean
    1）统一创建剩下所有bean的时候finishBeanFactoryInitialization(beanFactory)
    2）用到这个bean的时候，利用getBean创建，然后保存在容器中
3.容器的后置处理器
    1）每一个bean的创建，都会使用各种后置处理器处理，来增强bean的功能
        比如@Autowired注解的AutowiredAnnotationBeanPostProcessor
        比如AOP注解的AnnotationAwareAspectJAutoProxyCreator
4.事件驱动模型
    1）ApplicationListener：事件监听
    2）ApplicationEventMulticaster：事件派发器






